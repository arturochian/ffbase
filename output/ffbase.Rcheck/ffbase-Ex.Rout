
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ffbase"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ffbase')
Loading required package: ff
Loading required package: tools
Loading required package: bit
Loading package bit 1.1-8
package:bit (c) 2008/2009 Jens Oehlschlaegel (GPL-2)
creators: bit bitwhich
coercion: as.logical as.integer as.bit as.bitwhich which
operator: ! & | xor != ==
querying: print length any all min max range sum summary
bit access: length<- [ [<- [[ [[<-
for more help type ?bit

Attaching package: ‘bit’

The following object(s) are masked from ‘package:base’:

    xor

Loading package ff2.2-5
- getOption("fftempdir")=="/tmp/RtmpSlex25"

- getOption("ffextension")=="ff"

- getOption("ffdrop")==TRUE

- getOption("fffinonexit")==TRUE

- getOption("ffpagesize")==65536

- getOption("ffcaching")=="mmnoflush"  -- consider "ffeachflush" if your system stalls on large writes

- getOption("ffbatchbytes")==16777216 -- consider a different value for tuning your system

- getOption("ffmaxbytes")==536870912 -- consider a different value for tuning your system

Attaching package ff

Attaching package: ‘ff’

The following object(s) are masked from ‘package:utils’:

    write.csv, write.csv2

The following object(s) are masked from ‘package:base’:

    is.factor, is.ordered

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ffbase-package")
> ### * ffbase-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffbase-package
> ### Title: Basic statistical functions for ff
> ### Aliases: ffbase ffbase-package
> 
> ### ** Examples
> 
> 
> ffdat <- as.ffdf(data.frame(x=1:10, y=10:1))
> 
> # add a new ff vector z to the ffdf data.frame
> within(ffdat, {z <- x+y})[]
ffdf (all open) dim=c(10,3), dimorder=c(1,2) row.names=character 
ffdf virtual mapping
  PhysicalName VirtualVmode PhysicalVmode  AsIs VirtualIsMatrix
x            x      integer       integer FALSE           FALSE
y            y      integer       integer FALSE           FALSE
z            z      integer       integer FALSE           FALSE
  PhysicalIsMatrix PhysicalElementNo PhysicalFirstCol PhysicalLastCol
x            FALSE                 1                1               1
y            FALSE                 2                1               1
z            FALSE                 3                1               1
  PhysicalIsOpen
x           TRUE
y           TRUE
z           TRUE
ffdf data
    x  y  z
1   1 10 11
2   2  9 11
3   3  8 11
4   4  7 11
5   5  6 11
6   6  5 11
7   7  4 11
8   8  3 11
9   9  2 11
10 10  1 11
> 
> # add a new ff vector z to the ffdf data.frame using transform
> transform(ffdat, z=x+y)[]
ffdf (all open) dim=c(10,3), dimorder=c(1,2) row.names=character 
ffdf virtual mapping
  PhysicalName VirtualVmode PhysicalVmode  AsIs VirtualIsMatrix
x            x      integer       integer FALSE           FALSE
y            y      integer       integer FALSE           FALSE
z            z      integer       integer FALSE           FALSE
  PhysicalIsMatrix PhysicalElementNo PhysicalFirstCol PhysicalLastCol
x            FALSE                 1                1               1
y            FALSE                 2                1               1
z            FALSE                 3                1               1
  PhysicalIsOpen
x           TRUE
y           TRUE
z           TRUE
ffdf data
    x  y  z
1   1 10 11
2   2  9 11
3   3  8 11
4   4  7 11
5   5  6 11
6   6  5 11
7   7  4 11
8   8  3 11
9   9  2 11
10 10  1 11
> 
> cut(ffdat$x, breaks=3)[]
 [1] (0.991,4] (0.991,4] (0.991,4] (4,7]     (4,7]     (4,7]     (4,7]    
 [8] (7,10]    (7,10]    (7,10]   
Levels: (0.991,4] (4,7] (7,10]
> 
> tabulate.ff(ffdat$x)
 [1] 1 1 1 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("ffdfddply")
> ### * ffdfddply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffdfddply
> ### Title: Performs a split-apply-combine on an ffdf
> ### Aliases: ffdfddply
> 
> ### ** Examples
> 
> data(iris)
> ffiris <- as.ffdf(iris)
> 
> result <- ffdfddply(x=ffiris, 
+ 	split=x$Species, 
+ 	FUN=function(x){
+ 		lowestbypetalwidth <- x[order(x$Petal.Width, decreasing=TRUE), ]
+ 		lowestbypetalwidth <- lowestbypetalwidth[!duplicated(lowestbypetalwidth[, c("Species","Petal.Width")]), ]
+ 		lowestbypetalwidth$group <- factor(x= "lowest", levels = c("lowest","highest"))
+ 		highestbypetalwidth <- x[order(x$Petal.Width, decreasing=FALSE), ]
+ 		highestbypetalwidth <- highestbypetalwidth[!duplicated(highestbypetalwidth[, c("Species","Petal.Width")]), ]
+ 		highestbypetalwidth$group <- factor(x= "highest", levels = c("lowest","highest"))
+ 		rbind(lowestbypetalwidth, highestbypetalwidth)
+ }, 
+ BATCHBYTES = 5000, 
+ trace=TRUE)
2012-04-18 23:31:56, working on split 1/2 (setosa, versicolor)
2012-04-18 23:31:56, working on split 2/2 (virginica)
> class(result)
[1] "ffdf"
> dim(result)
[1] 54  6
> dim(iris)
[1] 150   5
> result[1:10,]
   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species  group
1           5.9         3.2          4.8         1.8 versicolor lowest
2           6.7         3.0          5.0         1.7 versicolor lowest
3           6.3         3.3          4.7         1.6 versicolor lowest
4           6.4         3.2          4.5         1.5 versicolor lowest
5           7.0         3.2          4.7         1.4 versicolor lowest
6           5.5         2.3          4.0         1.3 versicolor lowest
7           6.1         2.8          4.7         1.2 versicolor lowest
8           5.6         2.5          3.9         1.1 versicolor lowest
9           4.9         2.4          3.3         1.0 versicolor lowest
10          5.0         3.5          1.6         0.6     setosa lowest
> 
> 
> 
> cleanEx()
> nameEx("ffdfsave")
> ### * ffdfsave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffdfsave
> ### Title: Save a ffdf data.frame in directory
> ### Aliases: ffdfsave
> 
> ### ** Examples
> 
> 
> data(iris)
> 
> # create a ffdf data.frame from standard iris data set
> ffiris <- as.ffdf(iris)
> head(ffiris[,])
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> 
> .fn <- tempfile()
> ffdfsave(ffiris, .fn)
> 
> # clear everything
> rm(list=ls())
> ls()
character(0)
> 
> # load ffdf into environment
> load(file=.fn)
> # and back in business!
> head(ffiris[,])
Warning in `[.ff`(p, i2) :
  opening ff /tmp/RtmpSlex25/file70f531803a5b_ff/Sepal.Length.ff
Warning in `[.ff`(p, i2) :
  opening ff /tmp/RtmpSlex25/file70f531803a5b_ff/Sepal.Width.ff
Warning in `[.ff`(p, i2) :
  opening ff /tmp/RtmpSlex25/file70f531803a5b_ff/Petal.Length.ff
Warning in `[.ff`(p, i2) :
  opening ff /tmp/RtmpSlex25/file70f531803a5b_ff/Petal.Width.ff
Warning in `[.ff`(p, i2) :
  opening ff /tmp/RtmpSlex25/file70f531803a5b_ff/Species.ff
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> 
> 
> 
> cleanEx()
> nameEx("ffwhich")
> ### * ffwhich
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ffwhich
> ### Title: Create an index from a filter statement 'ffwhich' creates an
> ###   'ff' integer index vector from a filter expression. The resulting
> ###   vector can be used to index or subset a ffdf or ff vector.
> ### Aliases: ffwhich
> 
> ### ** Examples
> 
> # create a ff vector
> x <- ff(10:1)
> # make an ff index vector
> idx <- ffwhich(x, x < 5)
> # use it to retrieve values from x
> x[idx][]
[1] 4 3 2 1
> 
> # create a ffdf data.frame
> dat <- ffdf(x1=x, y1=x)
> # create an ff index vector from a filter statement
> idx <- ffwhich(dat, x1 < 5 & y1 > 2)
> # use it to select data from the data.frame
> dat[idx,][,]
  x1 y1
1  4  4
2  3  3
> 
> 
> 
> cleanEx()
> nameEx("mean.ff")
> ### * mean.ff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mean.ff
> ### Title: Mean of ff vector
> ### Aliases: mean.ff
> 
> ### ** Examples
> 
> # create a vector of length 10 million
> x <- ff(vmode="double", length=1e7)
> 
> mean(x)
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("min.ff")
> ### * min.ff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min.ff
> ### Title: Minimum, maximum and range of ff vector
> ### Aliases: max max.ff min min.ff range range.ff
> 
> ### ** Examples
> 
> x <- ff(1:100)
> 
> min(x)
[1] 1
> max(x)
[1] 100
> range(x)
[1]   1 100
> 
> is.na(x) <- 10
> min(x)
[1] NA
> max(x)
[1] NA
> range(x)
[1] NA NA
> 
> 
> min(x, na.rm=TRUE)
[1] 1
> max(x, na.rm=TRUE)
[1] 100
> range(x, na.rm=TRUE)
[1]   1 100
> 
> 
> 
> cleanEx()
> nameEx("tabulate.ff")
> ### * tabulate.ff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tabulate.ff
> ### Title: Tabulation for ff vectors
> ### Aliases: tabulate.ff
> 
> ### ** Examples
> 
> 
> #create a vector of 10 million
> x <- ff(vmode="integer", length=1e7)
> 
> # fill first 200 with values
> x[1:100] <- 1
> x[101:200] <- 2
> 
> # lets count
> tabulate.ff(x)
[1] 100 100
> 
> 
> 
> cleanEx()
> nameEx("transform.ffdf")
> ### * transform.ffdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform.ffdf
> ### Title: Transform a ffdf data.frame
> ### Aliases: transform.ffdf
> 
> ### ** Examples
> 
> 
> transform(as.ffdf(airquality), Ozone = -Ozone)
ffdf (all open) dim=c(153,6), dimorder=c(1,2) row.names=character 
ffdf virtual mapping
        PhysicalName VirtualVmode PhysicalVmode  AsIs VirtualIsMatrix
Ozone          Ozone      integer       integer FALSE           FALSE
Solar.R      Solar.R      integer       integer FALSE           FALSE
Wind            Wind       double        double FALSE           FALSE
Temp            Temp      integer       integer FALSE           FALSE
Month          Month      integer       integer FALSE           FALSE
Day              Day      integer       integer FALSE           FALSE
        PhysicalIsMatrix PhysicalElementNo PhysicalFirstCol PhysicalLastCol
Ozone              FALSE                 1                1               1
Solar.R            FALSE                 2                1               1
Wind               FALSE                 3                1               1
Temp               FALSE                 4                1               1
Month              FALSE                 5                1               1
Day                FALSE                 6                1               1
        PhysicalIsOpen
Ozone             TRUE
Solar.R           TRUE
Wind              TRUE
Temp              TRUE
Month             TRUE
Day               TRUE
ffdf data
    Ozone Solar.R  Wind  Temp Month   Day
1   -41.0   190.0   7.4  67.0   5.0   1.0
2   -36.0   118.0   8.0  72.0   5.0   2.0
3   -12.0   149.0  12.6  74.0   5.0   3.0
4   -18.0   313.0  11.5  62.0   5.0   4.0
5      NA      NA  14.3  56.0   5.0   5.0
6   -28.0      NA  14.9  66.0   5.0   6.0
7   -23.0   299.0   8.6  65.0   5.0   7.0
8   -19.0    99.0  13.8  59.0   5.0   8.0
:       :       :     :     :     :     :
146 -36.0   139.0  10.3  81.0   9.0  23.0
147  -7.0    49.0  10.3  69.0   9.0  24.0
148 -14.0    20.0  16.6  63.0   9.0  25.0
149 -30.0   193.0   6.9  70.0   9.0  26.0
150    NA   145.0  13.2  77.0   9.0  27.0
151 -14.0   191.0  14.3  75.0   9.0  28.0
152 -18.0   131.0   8.0  76.0   9.0  29.0
153 -20.0   223.0  11.5  68.0   9.0  30.0
> transform(as.ffdf(airquality), new = -Ozone, Temp = (Temp-32)/1.8)
ffdf (all open) dim=c(153,7), dimorder=c(1,2) row.names=character 
ffdf virtual mapping
        PhysicalName VirtualVmode PhysicalVmode  AsIs VirtualIsMatrix
Ozone          Ozone      integer       integer FALSE           FALSE
Solar.R      Solar.R      integer       integer FALSE           FALSE
Wind            Wind       double        double FALSE           FALSE
Temp            Temp       double        double FALSE           FALSE
Month          Month      integer       integer FALSE           FALSE
Day              Day      integer       integer FALSE           FALSE
new              new      integer       integer FALSE           FALSE
        PhysicalIsMatrix PhysicalElementNo PhysicalFirstCol PhysicalLastCol
Ozone              FALSE                 1                1               1
Solar.R            FALSE                 2                1               1
Wind               FALSE                 3                1               1
Temp               FALSE                 4                1               1
Month              FALSE                 5                1               1
Day                FALSE                 6                1               1
new                FALSE                 7                1               1
        PhysicalIsOpen
Ozone             TRUE
Solar.R           TRUE
Wind              TRUE
Temp              TRUE
Month             TRUE
Day               TRUE
new               TRUE
ffdf data
        Ozone   Solar.R      Wind      Temp     Month       Day       new
1    41.00000 190.00000   7.40000  19.44444   5.00000   1.00000 -41.00000
2    36.00000 118.00000   8.00000  22.22222   5.00000   2.00000 -36.00000
3    12.00000 149.00000  12.60000  23.33333   5.00000   3.00000 -12.00000
4    18.00000 313.00000  11.50000  16.66667   5.00000   4.00000 -18.00000
5          NA        NA  14.30000  13.33333   5.00000   5.00000        NA
6    28.00000        NA  14.90000  18.88889   5.00000   6.00000 -28.00000
7    23.00000 299.00000   8.60000  18.33333   5.00000   7.00000 -23.00000
8    19.00000  99.00000  13.80000  15.00000   5.00000   8.00000 -19.00000
:           :         :         :         :         :         :         :
146  36.00000 139.00000  10.30000  27.22222   9.00000  23.00000 -36.00000
147   7.00000  49.00000  10.30000  20.55556   9.00000  24.00000  -7.00000
148  14.00000  20.00000  16.60000  17.22222   9.00000  25.00000 -14.00000
149  30.00000 193.00000   6.90000  21.11111   9.00000  26.00000 -30.00000
150        NA 145.00000  13.20000  25.00000   9.00000  27.00000        NA
151  14.00000 191.00000  14.30000  23.88889   9.00000  28.00000 -14.00000
152  18.00000 131.00000   8.00000  24.44444   9.00000  29.00000 -18.00000
153  20.00000 223.00000  11.50000  20.00000   9.00000  30.00000 -20.00000
> 
> 
> 
> cleanEx()
> nameEx("with.ffdf")
> ### * with.ffdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with.ffdf
> ### Title: Evaluate an expression in a ffdf data environment
> ### Aliases: with.ffdf
> 
> ### ** Examples
> 
> dat <- data.frame(x=1:10, y=10:1)
> 
> ffdat <- as.ffdf(dat)
> 
> with(dat, {x+y})
 [1] 11 11 11 11 11 11 11 11 11 11
> 
> 
> 
> cleanEx()
> nameEx("within.ffdf")
> ### * within.ffdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: within.ffdf
> ### Title: Evaluate an expression in a ffdf data environment
> ### Aliases: within.ffdf
> 
> ### ** Examples
> 
> 
> ffdat <- as.ffdf(data.frame(x=1:10, y=10:1))
> # add z to the ffdat
> within(ffdat, {z <- x+y})
ffdf (all open) dim=c(10,3), dimorder=c(1,2) row.names=character 
ffdf virtual mapping
  PhysicalName VirtualVmode PhysicalVmode  AsIs VirtualIsMatrix
x            x      integer       integer FALSE           FALSE
y            y      integer       integer FALSE           FALSE
z            z      integer       integer FALSE           FALSE
  PhysicalIsMatrix PhysicalElementNo PhysicalFirstCol PhysicalLastCol
x            FALSE                 1                1               1
y            FALSE                 2                1               1
z            FALSE                 3                1               1
  PhysicalIsOpen
x           TRUE
y           TRUE
z           TRUE
ffdf data
    x  y  z
1   1 10 11
2   2  9 11
3   3  8 11
4   4  7 11
5   5  6 11
6   6  5 11
7   7  4 11
8   8  3 11
9   9  2 11
10 10  1 11
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.69 0.28 2.016 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
